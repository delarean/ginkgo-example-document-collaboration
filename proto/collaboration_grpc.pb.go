// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: collaboration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollaborationService_SubscribeToDocument_FullMethodName = "/collaboration.CollaborationService/SubscribeToDocument"
	CollaborationService_SendEdit_FullMethodName            = "/collaboration.CollaborationService/SendEdit"
	CollaborationService_GetDocument_FullMethodName         = "/collaboration.CollaborationService/GetDocument"
)

// CollaborationServiceClient is the client API for CollaborationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationServiceClient interface {
	// Подписаться на обновления документа
	SubscribeToDocument(ctx context.Context, in *DocumentSubscriptionRequest, opts ...grpc.CallOption) (CollaborationService_SubscribeToDocumentClient, error)
	// Отправить изменение в документе
	SendEdit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	// Получить текущее состояние документа
	GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
}

type collaborationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationServiceClient(cc grpc.ClientConnInterface) CollaborationServiceClient {
	return &collaborationServiceClient{cc}
}

func (c *collaborationServiceClient) SubscribeToDocument(ctx context.Context, in *DocumentSubscriptionRequest, opts ...grpc.CallOption) (CollaborationService_SubscribeToDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollaborationService_ServiceDesc.Streams[0], CollaborationService_SubscribeToDocument_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collaborationServiceSubscribeToDocumentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollaborationService_SubscribeToDocumentClient interface {
	Recv() (*DocumentUpdate, error)
	grpc.ClientStream
}

type collaborationServiceSubscribeToDocumentClient struct {
	grpc.ClientStream
}

func (x *collaborationServiceSubscribeToDocumentClient) Recv() (*DocumentUpdate, error) {
	m := new(DocumentUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collaborationServiceClient) SendEdit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, CollaborationService_SendEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, CollaborationService_GetDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServiceServer is the server API for CollaborationService service.
// All implementations must embed UnimplementedCollaborationServiceServer
// for forward compatibility
type CollaborationServiceServer interface {
	// Подписаться на обновления документа
	SubscribeToDocument(*DocumentSubscriptionRequest, CollaborationService_SubscribeToDocumentServer) error
	// Отправить изменение в документе
	SendEdit(context.Context, *EditRequest) (*EditResponse, error)
	// Получить текущее состояние документа
	GetDocument(context.Context, *DocumentRequest) (*DocumentResponse, error)
	mustEmbedUnimplementedCollaborationServiceServer()
}

// UnimplementedCollaborationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollaborationServiceServer struct {
}

func (UnimplementedCollaborationServiceServer) SubscribeToDocument(*DocumentSubscriptionRequest, CollaborationService_SubscribeToDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToDocument not implemented")
}
func (UnimplementedCollaborationServiceServer) SendEdit(context.Context, *EditRequest) (*EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEdit not implemented")
}
func (UnimplementedCollaborationServiceServer) GetDocument(context.Context, *DocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedCollaborationServiceServer) mustEmbedUnimplementedCollaborationServiceServer() {}

// UnsafeCollaborationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationServiceServer will
// result in compilation errors.
type UnsafeCollaborationServiceServer interface {
	mustEmbedUnimplementedCollaborationServiceServer()
}

func RegisterCollaborationServiceServer(s grpc.ServiceRegistrar, srv CollaborationServiceServer) {
	s.RegisterService(&CollaborationService_ServiceDesc, srv)
}

func _CollaborationService_SubscribeToDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DocumentSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollaborationServiceServer).SubscribeToDocument(m, &collaborationServiceSubscribeToDocumentServer{stream})
}

type CollaborationService_SubscribeToDocumentServer interface {
	Send(*DocumentUpdate) error
	grpc.ServerStream
}

type collaborationServiceSubscribeToDocumentServer struct {
	grpc.ServerStream
}

func (x *collaborationServiceSubscribeToDocumentServer) Send(m *DocumentUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _CollaborationService_SendEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).SendEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_SendEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).SendEdit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationService_ServiceDesc is the grpc.ServiceDesc for CollaborationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collaboration.CollaborationService",
	HandlerType: (*CollaborationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEdit",
			Handler:    _CollaborationService_SendEdit_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _CollaborationService_GetDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToDocument",
			Handler:       _CollaborationService_SubscribeToDocument_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collaboration.proto",
}
